import numpy as np
import vtk
from glob import glob
import argparse
from utilities import *

class ExtractProbePoints():
	def __init__(self,args):
		self.Args=args

	def Main(self):
		#Get the list of files
		FileNames=sorted(glob(self.Args.InputFolder+"/all_results.vtu_*.vtu"))

		#Read the Probe Points
		ProbePoints=[]
		ProbePointFile=open(self.Args.InputFile,'r')
		for Line in ProbePointFile:
			line=Line.split()
			ProbePoints.append([float(line[0]),float(line[1]),float(line[2])])
		ProbePointFile.close() 
		
		#Get the Probe Points
		if self.Args.Radius!=0:
			#Read the first velocity file
			VelocityFile0=ReadVTUFile(FileNames[0])
			
			#Get the Coordinates
			NPoints=VelocityFile0.GetNumberOfPoints()
			MeshPoints=np.array([VelocityFile0.GetPoint(i) for i in range(NPoints)])


			#For each probe point, find the closest nodes that fall within radius
			ProbePointSphere_=[]
			for i in range(len(ProbePoints)):
				Distance_=np.sum((MeshPoints - ProbePoints[i])**2, axis=1)
				SortArray=np.argsort(Distance_)
				
				#Find the closest point to the probe point within give radius
				for j in range(len(SortArray)):
					if Distance_[SortArray[j]]<self.Args.Radius:
						ProbePointSphere_.append(MeshPoints[SortArray[j]])
					else:
						break
			
		
			#
	
					
		"""


		#Read the list of probe points
		PointsVTK = vtk.vtkPoints()
		ProbePointFile=open(self.Args.InputFile,'r')
		for Line in ProbePointFile:
			line=Line.split()		
			PointsVTK.InsertNextPoint(line[0],line[1],line[2])
  
		
	
		ProbePoints=[]
		ProbePointFile=open(self.Args.InputFile,'r')
		for Line in ProbePointFile:
			line=Line.split()
			ProbePoints.append([float(line[0]),float(line[1]),float(line[2])])
		ProbePointFile.close()

		#Loop over all of the velocity
		counter=0
		for FileName in FileNames:
			#Read the data in the file
			Velocity_=ReadVTUFile(FileName)"""
			
			
				




if __name__=="__main__":
        #Description
	parser = argparse.ArgumentParser(description="This script will extrac pressure/velocity data from vtu files generated by SimVascular")

        #Provide a path to the Magnitude Images
	parser.add_argument('-InputFolder', '--InputFolder', type=str, required=True, dest="InputFolder",help="This folder contains the velocity files in vtu format.")

	parser.add_argument('-InputFile', '--InputFile', type=str, required=True, dest="InputFile",help="The input file contains a column list of x y z coordinates for which data is needed.")
	parser.add_argument('-Radius', '--Radius', type=float, required=False, dest="Radius",default=0, help="The radius around the probe point for which probe points are also needed")

        #The number of fourier modes
	parser.add_argument('-OutputFolder', '--OutputFolder', type=int, required=False, dest="OutputFolder",help="The output folder to store the data")

	#Put all the arguments together
	args=parser.parse_args()

        #Call your Class
	ExtractProbePoints(args).Main()

